{"name":"Graphicsinrustviaheadbashing","tagline":"I'm trying to learn standard opengl, but by using rust. Since I couldn't find a tutorial that did what I wanted I figured I'd document my progress here.","body":"# GraphicsInRustViaHeadBashing\r\nI'm trying to learn standard opengl, but by using rust. \r\n\r\nSince I couldn't find a tutorial that did what I wanted I figured I'd document my progress here. This will probably be a project journal type thing, and hopefully contain information useful to others.  It will also likely include me complaining, but hopefully in a good natured way. I've never done this before so idk how this will work out.\r\n\r\n#Project goal\r\n\r\nFiddle around and make some 3d graphics, maybe eventually make a game that has graphics like starfox from the snes.\r\nBut for now I think I'd be cool with a rotating cube.\r\nMy goal is not to learn just the rustic ways of graphics, but to learn standard opengl as well.\r\n\r\n#Library choice\r\nTo fit with my goal of being as close to opengl as possible I am opting to use the gl-rs https://github.com/bjz/gl-rs library as opposed to gfx-rs or glium.\r\n\r\n#hardware\r\n\r\nI'm doing this on a dell latitude e6510 laptop I bought used and has...\r\n>OpenGL version string: 2.1 Mesa 10.3.2\r\n\r\nSo yeah a bit old.\r\n\r\nFor an os I'm running Debian Jessie, and for whatever reason I'm using rustc nightlies although stable might be smarter.\r\n\r\nWell here goes nothing.\r\n\r\n___\r\n\r\n#P0\r\nTo start off I'll just make a new cargo project P0, copy my preferred rustfmt.toml over and just work on making the examples from here  https://github.com/bjz/gl-rs/tree/master/gl work.\r\n\r\nGetting the first example \"basic.rs\" running was simply a matter of adding the \"gl\" and \"glutin\" dependencies to the Cargo.toml. Moving on to \"Triangle.rs\" (renamed to Main.rs of course) it should be easy, just a cargo build and.... well crap.\r\n\r\n>Running `target/debug/P0`\r\nthread '<main>' panicked at '0:1(10): error: GLSL 1.50 is not supported. Supported versions are: 1.10, 1.20, and 1.00 ES', src/main.rs:66\r\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\r\nProcess didn't exit successfully: `target/debug/P0` (exit code: 101)\r\n\r\nlets change the shader versions to 120.\r\n\r\n>thread '<main>' panicked at '0:2(1): error: `in' qualifier in declaration of `position' only valid for function parameters in GLSL 1.2\r\n\r\ncrud. But after a bit of googling and bouncing here https://www.opengl.org/discussion_boards/showthread.php/181729-Invalid-qualifiers-in-in-global-variable I changed these shaders:\r\n\r\n    // Shader sources\r\n    static VS_SRC: &'static str =\r\n       \"#version 150\\n\\\r\n        in vec2 position;\\n\\\r\n        void main() {\\n\\\r\n           gl_Position = vec4(position, 0.0, 1.0);\\n\\\r\n         }\";\r\n\r\n    static FS_SRC: &'static str =\r\n       \"#version 150\\n\\\r\n        out vec4 out_color;\\n\\\r\n        void main() {\\n\\\r\n           out_color = vec4(1.0, 1.0, 1.0, 1.0);\\n\\\r\n        }\";\r\n\r\nto\r\n\r\n    static VS_SRC: &'static str =\r\n       \"#version 120\\n\\\r\n        attribute vec2 position;\\n\\\r\n        void main() {\\n\\\r\n           gl_Position = vec4(position, 0.0, 1.0);\\n\\\r\n        }\";\r\n\r\n    static FS_SRC: &'static str =\r\n       \"#version 120\\n\\\r\n        void main() {\\n\\\r\n            gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n\\\r\n        }\";\r\n\r\nAnd I get a nice white triangle. \r\n\r\nThis would be a good place to stop for the night, but you know it's winter in Ohio, and I'd like to think about spring; so I think I'll edit it to a nice green triangle instead.\r\n \r\nFinal thoughts: It's good that it is working, next time I think I/we should look into why it works. Also I'm sure I'll come back to look at this and wonder how I made so many grammar mistakes...  I should probably figure out how to add pictures.\r\n_________\r\n##Digging deeper into the gl-rs triangle example.\r\nAlright, I think I'll run through the example top to bottom and guess how it works. I could be totally wrong however.\r\n\r\n###License\r\nFirst off this thing is apache licensed, presumably since I've left that alone all is fine here.\r\n\r\n###Externs/uses\r\nPretty standard stuff here, gl and glutin both had to be in cargo.toml for this to work.\r\n\r\n###Vertices and shaders\r\n\r\nFirst off we see a simple array floats that seem to be the x,y coords for our triangle, modifying them shows this to be true.\r\nNext:\r\n>static VS_SRC: &'static str =\r\n\r\nI'm gonna say this is a Vertex Shader, I'm not 100% positive on what it does however.\r\n>gl_Position = vec4(position, 0.0, 1.0);\\n\\\r\n\r\nPosition seems to be the 2d coords, probably from the vertex array.\r\nThe first number is probably the Z coord.....\r\n\r\nSo the last coord, well I doubt we're working in a relativistic system here so to google batman!\r\nhttp://stackoverflow.com/questions/9943636/why-not-vec3-for-opengl-es-2-0-gl-position\r\nand following there to gamedev, and a link in a post by \"Jovan\" http://bishopw.loni.ucla.edu/air5/homogenous.html its for linear transformations, neat. Just for fun setting this to different (non-zero) values seems to scale the triangle; which matches what I'd expect from the link.\r\n\r\n\r\nFinally:\r\n> gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0);\\n\\\r\nThis is how I made the triangle green, pretty obviously rgba colors here.\r\n\r\n###Compile shader\r\nWell this would seem to load those shaders into opengl, nothing to crazy here.\r\nIt's neat how the shaders are basically referred to by a uint handle.\r\n\r\n###Link Program\r\nThis seems to associate the shaders together, and returns a handle to that unit.\r\n\r\n###main\r\nThis seems to create the window, run the previous two fns, in fact nothing seems to interesting until we look at...\r\n> gl::GenVertexArrays(1, &mut vao);\r\n\r\nLooking here https://www.opengl.org/wiki/GLAPI/glGenVertexArrays\r\n\r\nWe see that the 1 means we only want to create a single vertex array, and the pointer to va0  is  a stand in for a C style int array with one element to store the new handle.\r\n\r\nA similar pattern seems to hold, so I'll skip down to\r\n\r\n>for event in window.wait_events() {\r\n\r\nSince I'm usually in c# land the first thing I notice is an event loop rather than some callbacky-delagatey-thing here, which is cool.\r\n\r\nIt looks like this just colors the background black and draws the triangle, just to be sure I've changed the background to be red,  added a 4th vertex to the array in the vertices, and told it to draw another triangle using the last 3 coords like this.....\r\n>  gl::DrawArrays(gl::TRIANGLES, 1, 4);\r\n\r\nAnd as soon as I bother to figure out images I'll upload one.\r\n\r\nI think this will be the final modification to P0, to see the changes I made I suppose you can diff the main.rs file with the Triangle.rs file in gl-rs if you desire.\r\n\r\n##Final thoughts: \r\nKeeping this record actually is forcing me to to look a little more in depth at how this works. So thank you anonymous reader for basically serving as a rubber duck on steroids!\r\n\r\n##Next time\r\nSince one of my gripes was a lack of a basic rust opengl tutorial, I think I will work through this https://en.wikibooks.org/wiki/OpenGL_Programming#Modern_OpenGL one designed for c/c++ and convert the examples to rust as I go... \r\n___","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}