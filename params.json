{"name":"Graphicsinrustviaheadbashing","tagline":"I'm trying to learn standard opengl, but by using rust. Since I couldn't find a tutorial that did what I wanted I figured I'd document my progress here.","body":"# GraphicsInRustViaHeadBashing\r\nI'm trying to learn standard opengl, but by using rust. \r\n\r\nSince I couldn't find a tutorial that did what I wanted I figured I'd document my progress here. This will probably be a project journal type thing, and hopefully contain information useful to others.  It will also likely include me complaining, but hopefully in a good natured way. I've never done this before so idk how this will work out.\r\n\r\n#Project goal\r\n\r\nFiddle around and make some 3d graphics, maybe eventually make a game that has graphics like starfox from the snes.\r\nBut for now I think I'd be cool with a rotating cube.\r\nMy goal is not to learn just the rustic ways of graphics, but to learn standard opengl as well.\r\n\r\n#Library choice\r\nTo fit with my goal of being as close to opengl as possible I am opting to use the gl-rs https://github.com/bjz/gl-rs library as opposed to gfx-rs or glium.\r\n\r\n#hardware\r\n\r\nI'm doing this on a dell latitude e6510 laptop I bought used and has...\r\n>OpenGL version string: 2.1 Mesa 10.3.2\r\n\r\nSo yeah a bit old.\r\n\r\nFor an os I'm running Debian Jessie, and for whatever reason I'm using rustc nightlies although stable might be smarter.\r\n\r\nWell here goes nothing.\r\n\r\n___\r\n\r\n#P0\r\nTo start off I'll just make a new cargo project P0, copy my preferred rustfmt.toml over and just work on making the examples from here  https://github.com/bjz/gl-rs/tree/master/gl work.\r\n\r\nGetting the first example \"basic.rs\" running was simply a matter of adding the \"gl\" and \"glutin\" dependencies to the Cargo.toml. Moving on to \"Triangle.rs\" (renamed to Main.rs of course) it should be easy, just a cargo build and.... well crap.\r\n\r\n>Running `target/debug/P0`\r\nthread '<main>' panicked at '0:1(10): error: GLSL 1.50 is not supported. Supported versions are: 1.10, 1.20, and 1.00 ES', src/main.rs:66\r\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\r\nProcess didn't exit successfully: `target/debug/P0` (exit code: 101)\r\n\r\nlets change the shader versions to 120.\r\n\r\n>thread '<main>' panicked at '0:2(1): error: `in' qualifier in declaration of `position' only valid for function parameters in GLSL 1.2\r\n\r\ncrud. But after a bit of googling and bouncing here https://www.opengl.org/discussion_boards/showthread.php/181729-Invalid-qualifiers-in-in-global-variable I changed these shaders:\r\n\r\n    // Shader sources\r\n    static VS_SRC: &'static str =\r\n       \"#version 150\\n\\\r\n        in vec2 position;\\n\\\r\n        void main() {\\n\\\r\n           gl_Position = vec4(position, 0.0, 1.0);\\n\\\r\n         }\";\r\n\r\n    static FS_SRC: &'static str =\r\n       \"#version 150\\n\\\r\n        out vec4 out_color;\\n\\\r\n        void main() {\\n\\\r\n           out_color = vec4(1.0, 1.0, 1.0, 1.0);\\n\\\r\n        }\";\r\n\r\nto\r\n\r\n    static VS_SRC: &'static str =\r\n       \"#version 120\\n\\\r\n        attribute vec2 position;\\n\\\r\n        void main() {\\n\\\r\n           gl_Position = vec4(position, 0.0, 1.0);\\n\\\r\n        }\";\r\n\r\n    static FS_SRC: &'static str =\r\n       \"#version 120\\n\\\r\n        void main() {\\n\\\r\n            gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n\\\r\n        }\";\r\n\r\nAnd I get a nice white triangle. \r\n\r\nThis would be a good place to stop for the night, but you know it's winter in Ohio, and I'd like to think about spring; so I think I'll edit it to a nice green triangle instead.\r\n \r\nFinal thoughts: It's good that it is working, next time I think I/we should look into why it works. Also I'm sure I'll come back to look at this and wonder how I made so many grammar mistakes...  I should probably figure out how to add pictures.\r\n_________","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}